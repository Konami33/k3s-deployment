name: Setup GitHub Runner and Ansible

on:
  workflow_run:
    workflows: ["Create AWS Infra using Pulumi"]
    types:
      - completed

jobs:
  setup_runner:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Pulumi login
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: pulumi login

      - name: Pulumi stack select
        run: pulumi stack select Konami33/k3s_infra/dev --cwd Infra

      - name: Pulumi refresh
        run: pulumi refresh --yes --cwd Infra
      
      - name: Save Pulumi outputs
        id: pulumi_outputs
        run: |
          GIT_RUNNER_IP=$(pulumi stack output git_runner_public_ip --cwd Infra)
          MASTER_NODE_IP=$(pulumi stack output master_node_private_ip --cwd Infra)
          WORKER_NODE1_IP=$(pulumi stack output worker_node1_private_ip --cwd Infra)
          WORKER_NODE2_IP=$(pulumi stack output worker_node2_private_ip --cwd Infra)
          echo "GIT_RUNNER_IP=$GIT_RUNNER_IP" >> $GITHUB_ENV
          echo "MASTER_NODE_IP=$MASTER_NODE_IP" >> $GITHUB_ENV
          echo "WORKER_NODE1_IP=$WORKER_NODE1_IP" >> $GITHUB_ENV
          echo "WORKER_NODE2_IP=$WORKER_NODE2_IP" >> $GITHUB_ENV
      
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: SSH to Runner EC2 and install GitHub Runner and Ansible
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.GIT_RUNNER_IP }} << 'EOF'
          sudo apt-get update -y
          sudo apt-get install -y openssh-server ansible

          # Check if SSH key already exists and create if it doesn't
          if [ ! -f ~/.ssh/id_rsa ]; then
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          fi

          # Start the SSH service
          sudo systemctl start ssh
          sudo systemctl enable ssh

          mkdir actions-runner && cd actions-runner

          curl -o actions-runner-linux-x64-2.317.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.317.0/actions-runner-linux-x64-2.317.0.tar.gz

          tar xzf ./actions-runner-linux-x64-2.317.0.tar.gz

          ./config.sh --url https://github.com/Konami33/k3s-deployment --token ${{ secrets.RUNNER_TOKEN }}

          sudo ./svc.sh install
          sudo ./svc.sh start
          EOF
        env:
          RUNNER_TOKEN: ${{ secrets.RUNNER_TOKEN }}

      - name: Install OpenSSH on Master and Worker Nodes
        run: |
          for host in ${{ env.MASTER_NODE_IP }} ${{ env.WORKER_NODE1_IP }} ${{ env.WORKER_NODE2_IP }}; do
            ssh -o StrictHostKeyChecking=no ubuntu@${{ env.GIT_RUNNER_IP }} ssh -o StrictHostKeyChecking=no ubuntu@$host << 'EOF'
            sudo apt-get update -y
            sudo apt-get install -y openssh-server

            # Start the SSH service
            sudo systemctl start ssh
            sudo systemctl enable ssh
            EOF
          done

      - name: Copy SSH Key to Master and Worker Nodes
        run: |
          for host in ${{ env.MASTER_NODE_IP }} ${{ env.WORKER_NODE1_IP }} ${{ env.WORKER_NODE2_IP }}; do
            ssh -o StrictHostKeyChecking=no ubuntu@${{ env.GIT_RUNNER_IP }} ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no ubuntu@$host
          done
